#!/usr/bin/env python3

import uuid
import os
import typing
import subprocess

import scenario


def get_installation():
    if os.getenv("ANDROID_DATA") is not None:
        return "android"
    return "archlinux"


def get_device(installation: str) -> str:
    match installation:
        case "android":
            model = subprocess.run(
                ["/system/bin/getprop", "ro.product.model"], stdout=subprocess.PIPE
            ).stdout.decode().strip()
            match model:
                case "SM-X900":
                    return "tablet"
                case "SM-S9080":
                    return "phone"
        case "archlinux":
            # Hack
            ls = os.listdir("/sys/class/backlight")
            if len(ls):
                return "laptop"
            return "pc"
    raise RuntimeError("Unrecognized device")


def validate_user(installation: str) -> None:
    match installation:
        case "android":
            return
        case "archlinux":
            if os.getenv("USER") != "er":
                raise RuntimeError("User is not er")
            return
    raise RuntimeError()


def get_log_file(installation: str) -> typing.TextIO:
    match installation:
        case "android":
            return open(f"{os.environ['TMPDIR']}/yadm_bootstrap_{uuid.uuid4()}", "w")
        case "archlinux":
            return open("/tmp/yadm_bootstrap_{}".format(uuid.uuid4()), "w")
    raise RuntimeError()


def colorize_result(result: dict) -> str:
    try:
        import termcolor

        if not result["result"]:
            return termcolor.colored(str(result), "red")
        elif result["changes"]:
            return termcolor.colored(str(result), "green")
    except:
        pass
    return str(result)


if __name__ == "__main__":
    installation = get_installation()
    device = get_device(installation)
    validate_user(installation)
    with get_log_file(installation) as log_fd:
        print(log_fd.name)
        for s in scenario.get_scenario(installation, device, log_fd):
            result = s()
            print(colorize_result(result))
