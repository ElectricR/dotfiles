#!/usr/bin/env python3
import os
import os.path



#####################
# Steps
#####################

# fakeroot is requirement for yay
ARCH_PACKAGES = ["clang", "gopls", "pyright", "fakeroot", "wget", "fd", "bat", "lua-language-server", "rustup", "fzf", "tmux", "tldr", "task", "zsh-autosuggestions", "zsh-syntax-highlighting", "zathura", "zathura-pdf-mupdf", "xclip", "npm", "bluez", "bluez-utils", "pipewire", "pipewire-pulse", "firefox", "tree", "htop", "xorg", "go", "picom", "kitty", "ripgrep", "xautolock", "slock", "flameshot", "cmake", "zsh", "unzip", "neovim", "curl", "python-pip", "nodejs", "awesome"]
YAY_PACKAGES = ["nvim-packer-git"]

def install_packages() -> int:
    package_manager = "pacman -Suy"
    distro_specific_packages = ARCH_PACKAGES
    retcode = os.system(f"sudo {package_manager} " + ' '.join(distro_specific_packages))
    return 2 if retcode else 0


def init_submodules():
    retcode = os.system("yadm submodule update --init --recursive")
    return 2 if retcode else 0


def yay_install():
    retcode = os.system("mkdir ~/projects/aur -p && cd ~/projects/aur && git clone https://aur.archlinux.org/yay-bin.git && cd ~/projects/aur/yay-bin && makepkg -si")
    return 1 if retcode else 0


def install_yay_packages():
    retcode = os.system(f"yay -Suy " + ' '.join(YAY_PACKAGES))
    return 1 if retcode else 0


def bootstrap_pipewire():
    retcode = os.system("systemctl --user start pipewire-pulse")
    return 1 if retcode else 0


def configure_shell():
    retcode = os.system("chsh -s $(which zsh)")
    return 1 if retcode else 0


def zsh_bd():
    retcode = os.system("sudo mkdir -p /usr/share/zsh/plugins/bd && sudo curl https://raw.githubusercontent.com/Tarrasch/zsh-bd/master/bd.zsh -o /usr/share/zsh/plugins/bd/bd.zsh")
    return 1 if retcode else 0


def zsh_external_placeholder():
    retcode = os.system("touch ~/.config/zsh/external.zsh")
    return 1 if retcode else 0


def rust_install():
    retcode = os.system("rustup +nightly component add rust-analyzer-preview && sudo mv ~/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rust-analyzer /usr/bin" )
    return 1 if retcode else 0


def fonts_install():
    retcode = os.system("wget https://download.jetbrains.com/fonts/JetBrainsMono-2.242.zip && unzip JetBrainsMono-2.242.zip -d tempaoeu && sudo mv tempaoeu/fonts/ttf/*.ttf /usr/share/fonts/ && rm JetBrainsMono-2.242.zip tempaoeu -r")
    if retcode: return 1

    os.system("wget https://github.com/ryanoasis/nerd-fonts/releases/download/v2.1.0/Ubuntu.zip && unzip Ubuntu.zip -d tempaoeu && sudo mkdir -p /usr/share/fonts/nerd && sudo mv tempaoeu/*.ttf /usr/share/fonts/nerd && rm Ubuntu.zip tempaoeu -r")
    if retcode: return 1

    os.system("wget https://github.com/be5invis/Iosevka/releases/download/v15.0.2/ttf-iosevka-15.0.2.zip && unzip ttf-iosevka-15.0.2.zip -d tempaoeu && sudo mkdir -p /usr/share/fonts/iosevka && sudo mv tempaoeu/*.ttf /usr/share/fonts/iosevka && rm ttf-iosevka-15.0.2.zip tempaoeu -r")
    return 1 if retcode else 0


def tmux_plugin():
    if not os.path.exists("/home/er/.tmux/plugins/tpm"):
        retcode = os.system("git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm")
        return 1 if retcode else 0
    return 0


def bootstrap_nvim():
    retcode = os.system("nvim --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'")
    return 1 if retcode else 0


HOME_PC_HYPR_EXTERNAL = """monitor=eDP-1,3840x2160@60,0x0,2

decoration {
    rounding=10
    multisample_edges=true
    blur=1
    blur_size=5 # minimum 1
    blur_passes=2 # minimum 1, more passes = more resource intensive.
    # Your blur "amount" is blur_size * blur_passes, but high blur_size (over around 5-ish) will produce artifacts.
    # if you want heavy blur, you need to up the blur_passes.
    # the more passes, the more you can up the blur_size without noticing artifacts.
    blur_new_optimizations=true
}
"""

LAPTOP_HYPR_EXTERNAL = """
monitor=HDMI-A-1,1920x1080@144,0x0,1
monitor=DB-1,1920x1080@144,1920x0,1
monitor=DB-2,1920x1080@144,3840,1

decoration {
    rounding=10
    multisample_edges=true
    blur=1
    blur_size=2 # minimum 1
    blur_passes=1 # minimum 1, more passes = more resource intensive.
    # Your blur "amount" is blur_size * blur_passes, but high blur_size (over around 5-ish) will produce artifacts.
    # if you want heavy blur, you need to up the blur_passes.
    # the more passes, the more you can up the blur_size without noticing artifacts.
    blur_new_optimizations=true
}
"""

pc_name = ''

def pc_specific_configs():
    match pc_name:
        case 'Home PC':
            hypr_external = HOME_PC_HYPR_EXTERNAL
        case 'Laptop':
            hypr_external = LAPTOP_HYPR_EXTERNAL
        case _:
            return
    retcode = os.system('mkdir -p ~/.config/hypr')
    if retcode: return 1
    with open('~/.config/hypr/hyprland_external.conf', 'w') as f:
        f.write(hypr_external)

#####################
# Main
#####################
def bootstrap():
    steps = [pc_specific_configs, install_packages, init_submodules, yay_install, install_yay_packages, bootstrap_pipewire, configure_shell, zsh_bd, zsh_external_placeholder, rust_install, fonts_install, tmux_plugin, bootstrap_nvim]
    for step in steps:
        exit_code = step()
        match exit_code:
            case 1:
                print(f"Step {step.__name__} didn't finish successfully")
            case 2:
                print(f"Step {step.__name__} didn't finish successfully. Aborting.")
    print("Successfull bootstrap!")


if __name__ == "__main__":
    pc_name = input('Home PC/Laptop?')
    match = input("Distro?:\n\t")
    if match == "Arch":
        bootstrap()
    else:
        print("Aborted")











#####################
# Legacy
#####################

package_to_install_ubuntu_specific = ["libxcb-xfixes0-dev", "lua5.2", "redshift"]

def kubecolor():
    os.system("go get github.com/hidetatz/kubecolor/cmd/kubecolor")

def ubuntu_install():
    def awesome_install():
        os.system("git clone https://github.com/awesomeWM/awesome")
        os.system("cd awesome; sudo apt build-dep awesome; make package;")
        os.system("cd awesome/build; sudo dpkg -i *.deb")
        os.system("rm awesome -rf")

    def picom_install():
        picom_deps = "libxext-dev libxcb1-dev libxcb-damage0-dev libxcb-xfixes0-dev libxcb-shape0-dev libxcb-render-util0-dev libxcb-render0-dev libxcb-randr0-dev libxcb-composite0-dev libxcb-image0-dev libxcb-present-dev libxcb-xinerama0-dev libxcb-glx0-dev libpixman-1-dev libdbus-1-dev libconfig-dev libgl1-mesa-dev libpcre2-dev libpcre3-dev libevdev-dev uthash-dev libev-dev libx11-xcb-dev meson"
        os.system("git clone https://github.com/yshui/picom")
        os.system(f"sudo apt install -y {picom_deps}")
        os.system("cd picom; git submodule update --init --recursive; meson --buildtype=release . build; ninja -C build ")
        os.system("sudo ninja -C build install")
        os.system("rm picom -rf")

    def go_install():
        os.system("wget https://go.dev/dl/go1.17.5.linux-amd64.tar.gz")
        os.system("sudo rm -rf /usr/local/go && sudo tar -C /usr/local -xzf go1.17.5.linux-amd64.tar.gz")

    os.system("curl -L https://sw.kovidgoyal.net/kitty/installer.sh | sh /dev/stdin")
    os.system("sudo ln -s ~/.local/kitty.app/bin/kitty /usr/bin/kitty")

    awesome_install()
    picom_install()
    go_install()
def awesome_iconizer():
    os.system("wget https://github.com/ElectricR/Awesome-Iconizer/raw/master/awesome_iconizer && sudo chmod +x awesome_iconizer && sudo mv awesome_iconizer /bin/")
def zsh_autosuggestions():
    os.system("git clone https://github.com/zsh-users/zsh-autosuggestions ~/.zsh/zsh-autosuggestions")
